/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 21 18:06:54 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(3981, 3981);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "placed token on ");
      player0.numBuys = 544;
      String string0 = player0.toString();
      assertEquals(" --- placed token on  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coins: 0numBuys: 544\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      player0.initializePlayerTurn();
      String string0 = player0.toString();
      assertEquals(" ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 1coins: 0numBuys: 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "Y/JkG");
      player0.numBuys = 15;
      player0.coins = 2647;
      // Undeclared exception!
      try { 
        player0.buyCard(gameState0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "-_M");
      player0.numBuys = (-2300);
      player0.buyCard(gameState0, 2197);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((GameState) null, "5NXCZ|*'V");
      Player player1 = player0.clone();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      player1.numBuys = 5;
      // Undeclared exception!
      try { 
        player1.buyCard(gameState0, (-4656));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "Y/JkG");
      player0.coins = (-488);
      player0.buyCard(gameState0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "i`u+vkf,|!r{");
      player0.numActions = (-310);
      player0.playKingdomCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(239);
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Baron");
      Player player1 = player0.clone();
      player1.numBuys = 239;
      player1.playKingdomCard(gameState0);
      assertNotSame(player1, player0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "Y/JkG");
      player0.coins = 2647;
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "fr>#)j1b$3r?hi");
      player0.hand = list0;
      player0.endTurn();
      Card card0 = player0.drawCard();
      player0.discard(card0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "i`u+vkf,|!r{");
      int int0 = player0.scoreFor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.discard = list0;
      player0.drawCard();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((GameState) null, "CouncilRoom");
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      linkedList0.addFirst((Card) null);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((GameState) null, ":4AYucl");
      player0.hand = (List<Card>) null;
      // Undeclared exception!
      try { 
        player0.printHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, (String) null);
      player0.hand = (List<Card>) linkedList0;
      linkedList0.add((Card) null);
      // Undeclared exception!
      try { 
        player0.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "discards hand");
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "fr>#)j1b$3r?hi");
      player0.hand = list0;
      player0.discard = gameState0.cards;
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "CBiWNo");
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((GameState) null, "M41oU9]L%@GV");
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "fr>#)j1b$3r?hi");
      player0.hand = list0;
      player0.printHand();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "i>u+vk,|!S");
      player0.playedCards = gameState0.cards;
      int int0 = player0.scoreFor();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "i>u+vk,|!S");
      player0.playedCards = gameState0.cards;
      player0.endTurn();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "Y/JkG");
      player0.numBuys = 15;
      player0.coins = 2647;
      player0.buyCard(gameState0, (-10));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player((GameState) null, (String) null);
      player0.numBuys = 15;
      player0.coins = 2647;
      // Undeclared exception!
      try { 
        player0.buyCard(gameState0, 2647);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, (String) null);
      player0.buyCard(gameState0, (-1530));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player((GameState) null, (String) null);
      player0.coins = 2647;
      player0.buyCard(gameState0, 2647);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((GameState) null, "3p)S03ZVr");
      player0.playTreasureCard();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "fr>#)j1b$3r?hi");
      player0.hand = list0;
      player0.playTreasureCard();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((GameState) null, "3p)S03ZVr");
      player0.endTurn();
      List<Card> list0 = Card.createCards();
      player0.hand = list0;
      // Undeclared exception!
      try { 
        player0.playKingdomCard((GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((GameState) null, "3p)S03ZVr");
      player0.endTurn();
      player0.playKingdomCard((GameState) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "fr>#)j1b$3r?hi");
      player0.hand = list0;
      player0.endTurn();
      player0.drawCard();
      player0.drawCard();
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "fr>#)j1b$3r?hi");
      Card card0 = player0.drawCard();
      // Undeclared exception!
      try { 
        player0.discard(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }
}
