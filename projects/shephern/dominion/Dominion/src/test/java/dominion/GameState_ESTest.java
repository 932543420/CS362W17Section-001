/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 16 17:50:58 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import dominion.Randomness;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      gameState0.addCard((Card) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer((-1));
      Integer.min(6, (-1));
      hashMap0.put((Card) null, integer0);
      gameState0.addCard((Card) null);
      gameState0.takeCard(card_CardName0);
      Integer integer1 = new Integer(6);
      Integer.toUnsignedString((-1));
      gameState0.addPlayer((Player) null);
      gameState0.isGameOver();
      Randomness.nextRandomInt(3673);
      GameState gameState1 = new GameState(gameState0.cards);
      GameState gameState2 = gameState1.clone();
      gameState2.takeCard((Card) null);
      gameState0.takeCard(card_CardName0);
      gameState2.players = gameState0.players;
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      gameState0.takeCard((Card) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.tokensPlaced = hashMap0;
      vector0.removeAll(gameState0.players);
      gameState0.takeCard((Card) null);
      Integer integer0 = new Integer(6);
      gameState0.toString();
      hashMap0.put((Card) null, integer0);
      gameState0.addPlayer((Player) null);
      gameState0.isGameOver();
      hashMap0.put((Card) null, (Integer) null);
      Randomness.nextRandomInt(3673);
      GameState gameState1 = new GameState(gameState0.cards);
      GameState gameState2 = gameState1.clone();
      gameState0.takeCard(card_CardName0);
      gameState2.players = gameState0.players;
      gameState1.getWinners();
      Randomness.random = null;
      Randomness.reset((-1L));
      // Undeclared exception!
      try { 
        gameState0.addCard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      gameState0.takeCard((Card) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer(16);
      Player player0 = new Player(gameState0, "(%?W{L`;g\" ");
      Player player1 = player0.clone();
      gameState0.addPlayer(player1);
      Integer.min(6, 16);
      hashMap0.put((Card) null, integer0);
      gameState0.tokensPlaced = hashMap0;
      gameState0.takeCard((Card) null);
      gameState0.cards = (List<Card>) vector0;
      gameState0.takeCard(card_CardName0);
      Integer integer1 = new Integer(6);
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(vector0, card_Type0);
      Integer.toUnsignedString(16);
      hashMap0.put((Card) null, integer1);
      gameState0.isGameOver();
      GameState gameState1 = new GameState(gameState0.cards);
      GameState gameState2 = gameState1.clone();
      gameState0.takeCard(card_CardName0);
      gameState2.players = gameState0.players;
      gameState1.getWinners();
      Randomness.random = null;
      Randomness.reset((-1L));
      Random.setNextRandom(2);
      // Undeclared exception!
      try { 
        gameState0.play(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      gameState0.takeCard((Card) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.tokensPlaced = hashMap0;
      gameState0.takeCard((Card) null);
      gameState0.cards = (List<Card>) vector0;
      gameState0.takeCard(card_CardName0);
      Integer integer0 = new Integer(6);
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(vector0, card_Type0);
      hashMap0.put((Card) null, integer0);
      gameState0.isGameOver();
      gameState0.getWinners();
      Randomness.random = null;
      Randomness.reset((-1L));
      Random.setNextRandom((-62));
      // Undeclared exception!
      try { 
        gameState0.play((-62));
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      gameState0.takeCard((Card) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer(16);
      Integer.min(6, 16);
      hashMap0.put((Card) null, (Integer) null);
      gameState0.tokensPlaced = hashMap0;
      // Undeclared exception!
      try { 
        gameState0.takeCard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      gameState0.addCard((Card) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer((-1));
      Integer.min(6, (-1));
      hashMap0.put((Card) null, integer0);
      gameState0.tokensPlaced = hashMap0;
      gameState0.takeCard(card_CardName0);
      gameState0.takeCard(card_CardName0);
      Integer integer1 = new Integer(6);
      Integer.toUnsignedString((-1));
      gameState0.addPlayer((Player) null);
      gameState0.isGameOver();
      Randomness.nextRandomInt(3673);
      GameState gameState1 = new GameState(gameState0.cards);
      GameState gameState2 = gameState1.clone();
      gameState0.takeCard(card_CardName0);
      gameState2.players = gameState0.players;
      gameState1.getWinners();
      Randomness.reset((-1L));
      gameState0.addCard((Card) null);
      // Undeclared exception!
      try { 
        gameState0.play(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.Type.values();
      Randomness.nextRandomInt(4);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.addAll((Collection<? extends Card>) gameState0.cards);
      linkedList0.retainAll(gameState0.players);
      gameState0.toString();
      Player player0 = new Player(gameState0, "The board game is empty you need to intialize the game!!!!");
      Player player1 = player0.clone();
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      gameState0.takeCard(card_CardName0);
      player1.player_username = "The board game is empty you need to intialize the game!!!!";
      gameState0.addPlayer(player0);
      player0.printHand();
      gameState0.isGameOver();
      player1.initializePlayerTurn();
      player1.clone();
      gameState0.addPlayer(player1);
      player0.player_username = "L0T]%CQ#49=AcM&";
      gameState0.takeCard((Card) null);
      gameState0.addPlayer(player0);
      gameState0.initializeGame();
      gameState0.toString();
      Randomness.reset(1L);
      GameState gameState1 = new GameState(gameState0.cards);
      Randomness.reset(1L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      vector0.retainAll(arrayDeque0);
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.cards = (List<Card>) vector0;
      Player player0 = new Player(gameState0, "K+AWp?p6goX");
      player0.toString();
      Player player1 = player0.clone();
      player0.discard = (List<Card>) vector0;
      Player player2 = player1.clone();
      player2.drawCard();
      gameState0.addCard((Card) null);
      player1.gain((Card) null);
      gameState0.addPlayer(player1);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.tokensPlaced = hashMap0;
      gameState0.cards = (List<Card>) vector0;
      Card.CardName card_CardName0 = Card.CardName.SeaHag;
      gameState0.takeCard(card_CardName0);
      GameState gameState1 = gameState0.clone();
      Card.CardName card_CardName1 = Card.CardName.Silver;
      gameState1.takeCard(card_CardName1);
      HashMap<Card, Integer> hashMap1 = gameState1.tokensPlaced;
      Player player0 = new Player(gameState0, (String) null);
      Player player1 = player0.clone();
      player0.initializePlayerTurn();
      player1.buyCard(gameState1, 0);
      gameState0.addPlayer(player1);
      gameState1.getWinners();
      gameState0.clone();
      gameState0.toString();
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.takeCard((Card) null);
      gameState0.initializeGame();
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      GameState gameState1 = gameState0.clone();
      gameState1.isGameOver();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      Card.getCard(vector0, card_CardName0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.takeCard((Card) null);
      gameState0.takeCard(card_CardName0);
      Integer integer0 = new Integer(6);
      hashMap0.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.tokensPlaced = hashMap0;
      gameState0.takeCard(card_CardName0);
      Integer integer0 = new Integer(6);
      hashMap0.put((Card) null, integer0);
      boolean boolean0 = gameState0.isGameOver();
      assertFalse(boolean0);
      
      Randomness.reset(6);
      HashMap<Player, Integer> hashMap1 = gameState0.play(2);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      gameState0.addCard((Card) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer((-1));
      Integer.min(6, (-1));
      hashMap0.put((Card) null, integer0);
      gameState0.addCard((Card) null);
      gameState0.takeCard(card_CardName0);
      Integer integer1 = new Integer(6);
      Integer.toUnsignedString((-1));
      gameState0.addPlayer((Player) null);
      gameState0.isGameOver();
      Randomness.nextRandomInt(3673);
      GameState gameState1 = new GameState(gameState0.cards);
      gameState0.takeCard(card_CardName0);
      gameState1.getWinners();
      Randomness.random = null;
      Randomness.reset((-1L));
      Random.setNextRandom(2);
      gameState0.addCard((Card) null);
      // Undeclared exception!
      try { 
        gameState0.play(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "AfuvnpU(7[GW^O");
      gameState0.addPlayer(player0);
      assertEquals(20, list0.size());
      
      GameState gameState1 = gameState0.clone();
      HashMap<Player, Integer> hashMap0 = gameState1.play(0);
      assertNotSame(gameState1, gameState0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer(16);
      Integer.min(6, 16);
      hashMap0.put((Card) null, integer0);
      gameState0.tokensPlaced = hashMap0;
      gameState0.takeCard((Card) null);
      gameState0.takeCard(card_CardName0);
      Integer integer1 = new Integer(6);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState0.takeCard(card_CardName0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer(16);
      Integer.min(6, 16);
      hashMap0.put((Card) null, integer0);
      gameState0.takeCard((Card) null);
      gameState0.takeCard(card_CardName0);
      Integer integer1 = new Integer(6);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.initializeGame();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.Type.values();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.addAll((Collection<? extends Card>) gameState0.cards);
      linkedList0.retainAll(gameState0.players);
      gameState0.toString();
      Player player0 = new Player(gameState0, "The board game is empty you need to intialize the game!!!!");
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      player0.drawCard();
      player0.clone();
      gameState0.addPlayer(player0);
      gameState0.takeCard(card_CardName0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.Type.values();
      Randomness.nextRandomInt(24);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.retainAll(gameState0.players);
      gameState0.toString();
      Player player0 = new Player(gameState0, "The board game is empty you need to intialize the game!!!!");
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      gameState0.takeCard(card_CardName0);
      player0.printHand();
      linkedList0.add((Card) null);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }
}
