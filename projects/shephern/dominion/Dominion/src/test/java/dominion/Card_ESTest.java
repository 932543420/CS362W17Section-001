/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 16 17:46:39 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import dominion.Randomness;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Randomness.reset((-731L));
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "/I.F2FmS'q9");
      player0.discard = list0;
      Player player1 = player0.clone();
      Card card0 = player1.drawCard();
      player1.discard(card0);
      LinkedList<Card> linkedList0 = player1.deck;
      player0.deck = linkedList0;
      card0.getCardName();
      Randomness.nextRandomInt((-2246));
      Card.Type.values();
      card0.equals("draw ");
      gameState1.initializeGame();
      Randomness.random = null;
      card0.getCardName();
      gameState0.addCard(card0);
      card0.getType();
      // Undeclared exception!
      try { 
        Randomness.nextRandomInt((-617));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Randomness", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Randomness.reset((-731L));
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Baron;
      Card.getCard(list0, card_CardName1);
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card.filter(list0, card_Type0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.SeaHag;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      Player player0 = new Player(gameState0, "Q=");
      player0.coins = 12;
      player0.buyCard(gameState0, (-16));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      Player player0 = new Player(gameState0, ")2A/4)b^c");
      player0.discard = list0;
      gameState0.initializeGame();
      gameState0.initializeGame();
      Card card0 = player0.drawCard();
      card0.play(player0, gameState0);
      gameState0.cards = list0;
      Random.setNextRandom((-1670));
      List<Card> list1 = Card.createCards();
      card0.toString();
      Card.CardName.values();
      int int0 = Randomness.totalCallsToRandom;
      player0.clone();
      Randomness.random = null;
      Randomness.reset(641L);
      GameState gameState1 = gameState0.clone();
      gameState1.tokensPlaced = gameState0.gameBoard;
      gameState1.play(13);
      card0.play(player0, gameState1);
      card0.equals(list1);
      Card.Type.values();
      card0.getTreasureValue();
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(gameState0.cards, card_Type0);
      Card.CardName[] card_CardNameArray1 = Card.CardName.values();
      assertFalse(card_CardNameArray1.equals((Object)card_CardNameArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.getCard(list0, card_CardName0);
      Card.createCards();
      Player player0 = new Player((GameState) null, (String) null);
      player0.clone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Embargo;
      Card.getCard(list0, card_CardName1);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(list0, card_CardName0);
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list1 = Card.filter(list0, card_Type0);
      GameState gameState0 = new GameState(list1);
      Player player0 = new Player(gameState0, "discards hand");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      Card.CardName.values();
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(list1, card_Type0);
      Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.getCard(list0, card_CardName0);
      Card.CardName.values();
      Card.CardName.values();
      Card.CardName.values();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.getCard(list0, card_CardName0);
      Card.createCards();
      Card.createCards();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card card0 = Card.getCard(list0, card_CardName0);
      List<Card> list1 = Card.createCards();
      GameState gameState0 = new GameState(list1);
      gameState0.getWinners();
      GameState gameState1 = gameState0.clone();
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(gameState0.cards, card_Type0);
      gameState1.takeCard(card0);
      Card.createCards();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card card0 = Card.getCard(vector0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.reset(2056L);
      Card.Type card_Type0 = Card.Type.VICTORY;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Randomness.reset(1697L);
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) null, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Randomness.reset((-731L));
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Gardens;
      Card.getCard(list0, card_CardName1);
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(list0, card_Type0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Feast;
      Card.getCard(list0, card_CardName1);
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(list0, card_Type0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.CouncilRoom;
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Randomness.nextRandomInt(3);
      Vector<Card> vector0 = new Vector<Card>(0, (-1719));
      GameState gameState0 = new GameState((List<Card>) vector0);
      vector0.ensureCapacity(885);
      GameState gameState1 = new GameState(gameState0.cards);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      gameState1.takeCard(card_CardName0);
      vector0.add((Card) null);
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }
}
