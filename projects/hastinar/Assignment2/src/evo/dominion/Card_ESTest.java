/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 01 05:20:41 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1385), (-1385), (-1385));
      Player player0 = new Player((GameState) null, " \tAdventurer-TREASURE \t\t Cost: -1385 \t\t Score: -1385 \tTreasure Value: -1385");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.discard = (List<Card>) linkedList0;
      linkedList0.add(card0);
      linkedList0.offer(card0);
      card0.play(player0, (GameState) null);
      assertEquals(-1385, card0.getScore());
      assertEquals(-1385, card0.getCost());
      assertEquals(-1385, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Laboratory;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 17, 19, 19);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      player0.discard = list0;
      card0.play(player0, gameState0);
      assertEquals(17, card0.getCost());
      assertEquals(19, card0.getScore());
      assertEquals(19, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Player player0 = new Player((GameState) null, (String) null);
      player0.hand = list0;
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(player0.hand, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 104, 0, 0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      int int0 = card0.score(player0);
      assertEquals(104, card0.getCost());
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card card0 = new Card(card_CardName0, (Card.Type) null, (-21), (-21), (-21));
      card0.getType();
      assertEquals(-21, card0.getTreasureValue());
      assertEquals(-21, card0.getCost());
      assertEquals(-21, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 104, 0, 0);
      card0.getType();
      assertEquals(0, card0.getTreasureValue());
      assertEquals(104, card0.getCost());
      assertEquals(0, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.CouncilRoom;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 1852, 1852, 1852);
      int int0 = card0.getTreasureValue();
      assertEquals(1852, card0.getScore());
      assertEquals(1852, int0);
      assertEquals(1852, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1550), (-1550), (-1550));
      int int0 = card0.getTreasureValue();
      assertEquals(-1550, card0.getScore());
      assertEquals(-1550, card0.getCost());
      assertEquals((-1550), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 81, 81, 81);
      int int0 = card0.getScore();
      assertEquals(81, card0.getTreasureValue());
      assertEquals(81, int0);
      assertEquals(81, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getCost();
      assertEquals(0, int0);
      assertEquals(0, card0.getScore());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card((Card.CardName) null, card_Type0, 17, 19, 19);
      card0.getCardName();
      assertEquals(17, card0.getCost());
      assertEquals(19, card0.getScore());
      assertEquals(19, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-2248), (-2248), (-2248));
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      arrayList0.add(card0);
      Card card1 = Card.getCard(arrayList0, card_CardName0);
      assertEquals(-2248, card1.getScore());
      assertNotNull(card1);
      assertEquals(-2248, card1.getTreasureValue());
      assertEquals(-2248, card1.getCost());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(stack0, card_Type0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Laboratory;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1268), 0, (-1268));
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName1 = Card.CardName.Province;
      Card card1 = Card.getCard(list0, card_CardName1);
      // Undeclared exception!
      try { 
        card0.compareTo(card1);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 307, 0);
      Card.CardName card_CardName1 = Card.CardName.Smithy;
      Card card1 = new Card(card_CardName1, card_Type0, 0, 0, 8);
      int int0 = card0.compareTo(card1);
      assertEquals((-9), int0);
      assertEquals(0, card1.getCost());
      assertEquals(307, card0.getScore());
      assertEquals(0, card0.getCost());
      assertEquals(8, card1.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.getCard(list0, card_CardName0);
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "Ambassador");
      player0.hand = (List<Card>) stack0;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Feast;
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) null, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 11, 999, 999);
      // Undeclared exception!
      try { 
        card0.compareTo((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list1 = Card.filter(list0, card_Type0);
      //  // Unstable assertion: assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card card0 = Card.getCard(arrayList0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Laboratory;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 17, 19, 19);
      Card.CardName card_CardName1 = card0.getCardName();
      boolean boolean0 = card0.equals(card_CardName1);
      assertFalse(boolean0);
      assertEquals(19, card0.getTreasureValue());
      assertEquals(17, card0.getCost());
      assertEquals(19, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1385), (-1385), (-1385));
      String string0 = card0.toString();
      assertEquals(" \tAdventurer-TREASURE \t\t Cost: -1385 \t\t Score: -1385 \tTreasure Value: -1385", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 104, 0, 0);
      int int0 = card0.getTreasureValue();
      assertEquals(104, card0.getCost());
      assertEquals(0, int0);
      assertEquals(0, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardends;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, Integer.MAX_VALUE, (-406), (-3225));
      card0.getType();
      assertEquals(2147483647, card0.getCost());
      assertEquals(-3225, card0.getTreasureValue());
      assertEquals(-406, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 1830, 1830, 1830);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "+1 Card, +1 Action, +1 Victory Point");
      player0.hand = list0;
      card0.play(player0, gameState0);
      card0.play(player0, gameState0);
      assertEquals(18, list0.size());
      assertEquals(1830, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "W");
      Random.setNextRandom(2);
      card0.play(player0, gameState0);
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, card0.getCost());
      assertEquals(0, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 1857, 1857, 1857);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6");
      gameState0.addPlayer(player0);
      Player player1 = new Player(gameState0, "6");
      player0.hand = list0;
      card0.play(player1, gameState0);
      assertEquals(19, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 1857, 1857, 1857);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6");
      gameState0.addPlayer(player0);
      Player player1 = new Player(gameState0, "6");
      card0.play(player1, gameState0);
      assertEquals(1857, card0.getCost());
      assertEquals(1857, card0.getScore());
      assertEquals(1857, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 1857, 1857, 1857);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "6");
      gameState0.addPlayer(player0);
      card0.play(player0, gameState0);
      assertEquals(1857, card0.getTreasureValue());
      assertEquals(1857, card0.getCost());
      assertEquals(1857, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.CouncilRoom;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 1845, 1845, 1845);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "(");
      gameState0.addPlayer(player0);
      Player player1 = new Player(gameState0, "(");
      player1.discard = player1.hand;
      card0.play(player1, gameState0);
      assertEquals(1845, card0.getScore());
      assertEquals(1845, card0.getTreasureValue());
      assertEquals(1845, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.CouncilRoom;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 1830, 1830, 1830);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "q");
      player0.discard = list0;
      gameState0.addPlayer(player0);
      card0.play(player0, gameState0);
      assertEquals(1830, card0.getTreasureValue());
      assertEquals(1830, card0.getCost());
      assertEquals(1830, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.Type card_Type0 = Card.Type.TREASURE;
      Player player0 = new Player((GameState) null, (String) null);
      player0.hand = list0;
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card card0 = new Card(card_CardName0, card_Type0, 81, 81, 81);
      player0.gain(card0);
      card0.play(player0, (GameState) null);
      assertEquals(81, card0.getScore());
      assertEquals(81, card0.getCost());
      assertEquals(81, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.TREASURE;
      Player player0 = new Player((GameState) null, (String) null);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card card0 = new Card(card_CardName0, card_Type0, 81, 81, 81);
      player0.gain(card0);
      // Undeclared exception!
      try { 
        card0.play(player0, (GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 14, 14, 14);
      Player player0 = new Player((GameState) null, " \tAdventurer-VICTORY \t\t Cost: 14 \t\t Score: 14 \tTreasure Value: 14");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.hand = (List<Card>) linkedList0;
      linkedList0.add(card0);
      linkedList0.add(card0);
      linkedList0.offer(card0);
      card0.play(player0, (GameState) null);
      assertEquals(14, card0.getTreasureValue());
      assertEquals(14, card0.getCost());
      assertEquals(14, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 81, 81, 81);
      Player player0 = new Player((GameState) null, (String) null);
      card0.play(player0, (GameState) null);
      assertEquals(81, card0.getTreasureValue());
      assertEquals(81, card0.getScore());
      assertEquals(81, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Village;
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, " [Q^q`[CAh4f)Uc}|");
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-1359), (-1359), (-1359));
      card0.play(player0, gameState0);
      assertEquals(-1359, card0.getScore());
      assertEquals(-1359, card0.getCost());
      assertEquals(-1359, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 13, 13, 13);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "?PlW7");
      card0.play(player0, gameState0);
      assertEquals(13, card0.getScore());
      assertEquals(13, card0.getTreasureValue());
      assertEquals(13, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 1830, 1830, 1830);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "+1 Card, +1 Action, +1 Victory Point");
      card0.play(player0, gameState0);
      assertEquals(1830, card0.getTreasureValue());
      assertEquals(1830, card0.getScore());
      assertEquals(1830, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      Card.CardName card_CardName0 = Card.CardName.GreatHall;
      Card.Type card_Type0 = Card.Type.ACTION;
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "!v1Wy(+](p8v/UoU");
      Card card0 = new Card(card_CardName0, card_Type0, (-21), (-21), (-21));
      card0.play(player0, gameState0);
      assertEquals(-21, card0.getTreasureValue());
      assertEquals(-21, card0.getCost());
      assertEquals(-21, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gardends;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " \tGardends-ACTION \t\t Cost: 4 \t\t Score: 0 \tTreasure Value: 0");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "W");
      card0.play(player0, gameState0);
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, card0.getCost());
      assertEquals(0, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 307, 0);
      card0.compareTo(card0);
      assertEquals(0, card0.getCost());
      assertEquals(307, card0.getScore());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 2135, 0);
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "\t\t Score: ");
      int int0 = card0.score(player0);
      assertEquals(0, card0.getCost());
      assertEquals(0, card0.getTreasureValue());
      assertEquals(2135, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1318), (-4265), (-1318));
      int int0 = card0.getCost();
      assertEquals((-1318), int0);
      assertEquals(-4265, card0.getScore());
      assertEquals(-1318, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 622, (-4866), 1513);
      int int0 = card0.getScore();
      assertEquals((-4866), int0);
      assertEquals(622, card0.getCost());
      assertEquals(1513, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      Player player0 = new Player((GameState) null, " \tAdventurer-VICTORY \t\t Cost: 0 \t\t Score: 0 \tTreasure Value: 0");
      LinkedList<Card> linkedList0 = player0.deck;
      linkedList0.add(card0);
      card0.play(player0, (GameState) null);
      assertEquals(0, card0.getScore());
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, card0.getCost());
  }
}
