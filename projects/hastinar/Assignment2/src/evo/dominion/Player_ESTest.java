/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 01 05:26:37 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "pmgzZT6\"ml.9&4");
      player0.numBuys = (-3258);
      String string0 = player0.toString();
      assertEquals("=================================--pmgzZT6\"ml.9&4--=================================Hand: []Discard: []Deck: []Played Cards: []NumActions: 0Coins: 0NumBuys: -3258\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.coins = (-385);
      String string0 = player0.toString();
      assertEquals("=================================----=================================Hand: []Discard: []Deck: []Played Cards: []NumActions: 0Coins: -385NumBuys: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Give every other player a copy of a card");
      LinkedList<Card> linkedList0 = player0.deck;
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1036), (-1036), 28);
      linkedList0.add(card0);
      linkedList0.add(card0);
      int int0 = player0.scoreFor();
      assertEquals((-2072), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "WTTt6{W>{");
      player0.hand = list0;
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      boolean boolean0 = player0.gain(card0);
      assertTrue(boolean0);
      
      int int0 = player0.scoreFor();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "85QrelRXZ%k,Jn");
      player0.numActions = (-3891);
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.coins = (-385);
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      Card card0 = player0.drawCard();
      assertEquals(Card.Type.TREASURE, card0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 561, (-1), (-3338));
      player0.gain(card0);
      Card card1 = player0.drawCard();
      assertEquals(561, card1.getCost());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>(84);
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list0 = Card.filter(priorityQueue0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 196, 1427);
      player0.gain(card0);
      Card card1 = player0.drawCard();
      assertEquals(196, card1.getScore());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(priorityQueue0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card card0 = new Card(card_CardName0, card_Type0, (-3892), 0, 0);
      player0.gain(card0);
      Card card1 = player0.drawCard();
      assertEquals(Card.Type.VICTORY, card1.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((GameState) null, "2gv`bckn");
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = player0.discard;
      player0.hand = list0;
      player0.initializePlayerTurn();
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "WTTt6{W>{");
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "Give every other player a copy of a card");
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.gain((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Give every other player a copy of a card");
      player0.endTurn();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "hLpTo|");
      player0.hand = null;
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 455, 1344, 29);
      // Undeclared exception!
      try { 
        player0.discard(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1307), (-1307), 631);
      boolean boolean0 = player0.gain(card0);
      assertTrue(boolean0);
      
      int int0 = player0.scoreFor();
      assertEquals((-1307), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Give every other player a copy of a card");
      int int0 = player0.scoreFor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 2, 1107, 1107);
      linkedList0.offerFirst(card0);
      Player player0 = new Player(gameState0, "L$8QN^)}s'/");
      player0.numActions = 2202;
      player0.hand = (List<Card>) linkedList0;
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "L$8QN^)}s'/");
      player0.numActions = 2202;
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      List<Card> list0 = player0.discard;
      player0.hand = list0;
      player0.initializePlayerTurn();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "<z(!.>!1$!'2");
      LinkedList<Card> linkedList0 = player0.deck;
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 900, 900, 0);
      linkedList0.add(card0);
      Card card1 = player0.drawCard();
      assertEquals(900, card1.getScore());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(priorityQueue0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.endTurn();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(priorityQueue0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Card card0 = player0.drawCard();
      player0.gain(card0);
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Give every other player a copy of a card");
      player0.printStateGame();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "Give every other player a copy of a card");
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(priorityQueue0, card_Type0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.discard((Card) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "L$8QN^)}s'/");
      player0.playTtreasureCard();
  }
}
