/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 26 00:26:28 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 2;
      player0.toString();
      Player player1 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.numBuys = 60000;
      ArrayList<Card> arrayList0 = player1.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      gameState0.initializeGame();
      player0.hand = arrayList0;
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.CardName.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      Card.CardName card_CardName0 = Card.CardName.Province;
      gameState0.embargoTokens = list0;
      Card card0 = Card.getCard(list0, card_CardName0);
      gameState0.initializeGame();
      player0.gain(card0);
      // Undeclared exception!
      try { 
        player0.scoreFor();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 1;
      player0.toString();
      Player player1 = new Player((GameState) null, " --- --------------------------- --- ");
      ArrayList<Card> arrayList0 = player1.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      // Undeclared exception!
      try { 
        player0.buyCard(gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "^");
      player0.discard = null;
      player0.printStateGame();
      // Undeclared exception!
      try { 
        player0.discard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((GameState) null, "E,9TGn1:.[");
      Stack<Card> stack0 = new Stack<Card>();
      Vector<Card> vector0 = new Vector<Card>((Collection<? extends Card>) stack0);
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.getCard(vector0, card_CardName0);
      player0.discard((Card) null);
      player0.numActions = 1830;
      player0.coins = 2062;
      Card card0 = player0.drawCard();
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Player.actionPhase Card:");
      player0.endTurn();
      player0.coins = 1;
      player0.toString();
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.buyCard((GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.endTurn();
      player0.coins = (-9);
      player0.toString();
      player0.buyCard((GameState) null);
      player0.numActions = 8;
      player0.coins = 0;
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState(linkedList0);
      Player player0 = new Player(gameState0, "");
      gameState0.embargoTokens = (List<Card>) linkedList0;
      player0.toString();
      player0.hand = null;
      player0.deck = linkedList0;
      gameState0.toString();
      gameState0.addPlayer(player0);
      player0.toString();
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      GameState.addEmbargo((Card) null);
      gameState0.isGameOver();
      gameState0.play();
      player0.numActions = (-1);
      player0.player_username = " discards ";
      ArrayList<Card> arrayList0 = player0.hand;
      player0.playedCards = arrayList0;
      player0.player_username = "";
      ArrayList<Card> arrayList1 = player0.playedCards;
      player0.toString();
      int int0 = player0.coins;
      Player player1 = new Player(gameState0, "|[^6]98MA(SC2WZ");
      player1.gain((Card) null);
      List<Card> list1 = player1.discard;
      player0.playKingdomCard();
      Player player2 = new Player(gameState0, (String) null);
      player2.discard = list1;
      player1.printStateGame();
      player2.player_username = "|[^6]98MA(SC2WZ";
      player2.player_username = "K";
      player1.toString();
      int int1 = player1.numBuys;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.endTurn();
      player0.toString();
      player0.discard = null;
      player0.player_username = "\n-------  -------\nnumActions: 1, coins: 0, numBuys: 1\nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\n";
      player0.buyCard((GameState) null);
      player0.numActions = 8;
      player0.coins = 0;
      Card.CardName.values();
      // Undeclared exception!
      try { 
        player0.gain((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState(arrayList0);
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "");
      player0.playTreasureCard();
      player0.drawCard();
      player0.discard((Card) null);
      player0.coins = 8;
      arrayList0.add((Card) null);
      player0.endTurn();
      player0.hand = arrayList0;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState(linkedList0);
      linkedList0.add((Card) null);
      linkedList0.pollFirst();
      linkedList0.poll();
      Player player0 = new Player(gameState0, "");
      player0.toString();
      Card.Type card_Type0 = Card.Type.ACTION;
      Card.filter(linkedList0, card_Type0);
      player0.playTreasureCard();
      ArrayList<Card> arrayList0 = player0.playedCards;
      player0.playTreasureCard();
      player0.numBuys = (-462);
      player0.buyCard(gameState0);
      player0.buyCard(gameState0);
      player0.buyCard(gameState0);
      Card.Type.values();
      player0.playedCards = arrayList0;
      player0.toString();
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "mEjW9(:h");
      ArrayList<Card> arrayList0 = player0.playedCards;
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(arrayList0, card_CardName0);
      arrayList0.add((Card) null);
      player0.numBuys = (-448);
      player0.playedCards = arrayList0;
      player0.discard = list0;
      player0.toString();
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("mEjW9(:h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.CardName.mEjW9(:h
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((GameState) null, "b-bU.g'");
      player0.discard((Card) null);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.endTurn();
      player0.toString();
      player0.discard = null;
      player0.buyCard((GameState) null);
      player0.coins = 0;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((GameState) null, "CJiwj");
      player0.toString();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.drawCard();
      player0.discard((Card) null);
      player0.discard = (List<Card>) linkedList0;
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      int int0 = player0.scoreFor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState(stack0);
      Player player0 = new Player(gameState0, (String) null);
      player0.playKingdomCard();
      player0.toString();
      gameState0.getWinners();
      player0.toString();
      player0.drawCard();
      Card.Type.values();
      Card.Type.values();
      Player player1 = new Player(gameState0, "\n------- null -------\nnumActions: 0, coins: 0, numBuys: 0\nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\n");
      ArrayList<Card> arrayList0 = player1.hand;
      player1.endTurn();
      player0.gain((Card) null);
      LinkedList<Card> linkedList0 = player1.deck;
      player1.deck = linkedList0;
      player0.player_username = "P.k";
      // Undeclared exception!
      try { 
        player0.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState(arrayList0);
      Player player0 = new Player(gameState0, "");
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 2;
      player0.toString();
      Player player1 = new Player((GameState) null, " --- --------------------------- --- ");
      ArrayList<Card> arrayList0 = player1.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      assertFalse(player0.equals((Object)player1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 2;
      player0.toString();
      Player player1 = new Player((GameState) null, " --- --------------------------- --- ");
      ArrayList<Card> arrayList0 = player1.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      gameState0.initializeGame();
      player0.buyCard(gameState0);
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 3;
      ArrayList<Card> arrayList0 = player0.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      player0.coins = 3;
      player0.playKingdomCard();
      player0.discard = null;
      player0.buyCard((GameState) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 6;
      player0.toString();
      Player player1 = new Player((GameState) null, " --- --------------------------- --- ");
      ArrayList<Card> arrayList0 = player1.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      player0.coins = 6;
      player0.playKingdomCard();
      player0.discard = (List<Card>) arrayList0;
      player0.buyCard((GameState) null);
      player0.numActions = 6;
      player0.coins = 6;
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 4;
      player0.toString();
      Player player1 = new Player((GameState) null, " --- --------------------------- --- ");
      ArrayList<Card> arrayList0 = player1.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.numBuys = 12;
      player0.buyCard(gameState0);
      player0.coins = 4;
      player0.playKingdomCard();
      player0.discard = (List<Card>) arrayList0;
      player0.buyCard((GameState) null);
      player0.numActions = 4;
      player0.coins = 0;
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 3;
      ArrayList<Card> arrayList0 = player0.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      gameState0.addPlayer(player0);
      player0.buyCard(gameState0);
      player0.buyCard((GameState) null);
      player0.numActions = (-6);
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- ----------p---h-------V---- --- ");
      player0.endTurn();
      player0.coins = 2684;
      ArrayList<Card> arrayList0 = player0.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      player0.coins = 2684;
      player0.buyCard((GameState) null);
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 0;
      player0.coins = 2684;
      player0.toString();
      Player player1 = new Player((GameState) null, " --- --------------------------- --- ");
      ArrayList<Card> arrayList0 = player1.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      player0.discard = null;
      player0.buyCard((GameState) null);
      assertFalse(player0.equals((Object)player1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      gameState0.cards = null;
      player0.printStateGame();
      int int0 = player0.coins;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "\n------- ");
      int int0 = player0.numActions;
      player0.discard = list0;
      ArrayList<Card> arrayList0 = player0.hand;
      player0.drawCard();
      int int1 = player0.scoreFor();
      assertEquals(10, int1);
      
      player0.initializePlayerTurn();
      ArrayList<Card> arrayList1 = player0.playedCards;
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState(stack0);
      Player player0 = new Player(gameState0, "Curse");
      player0.drawCard();
      player0.gain((Card) null);
      ArrayList<Card> arrayList0 = player0.hand;
      player0.playedCards = arrayList0;
      player0.endTurn();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((GameState) null, ".Q");
      List<Card> list0 = Card.createCards();
      ArrayList<Card> arrayList0 = new ArrayList<Card>((Collection<? extends Card>) list0);
      player0.hand = arrayList0;
      player0.scoreFor();
      player0.playTreasureCard();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "j3qj\"8=");
      int int0 = player0.numActions;
      gameState0.toString();
      gameState0.initializeGame();
      player0.discard = list0;
      player0.scoreFor();
      player0.initializePlayerTurn();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --q ");
      player0.endTurn();
      player0.coins = 7;
      player0.toString();
      player0.coins = 8;
      player0.playKingdomCard();
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.buyCard((GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((GameState) null, "{;j]p2T\"%)");
      player0.endTurn();
      player0.coins = 7;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      player0.coins = 7;
      player0.discard = null;
      player0.buyCard((GameState) null);
      player0.coins = player0.coins;
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 7;
      player0.toString();
      Player player1 = new Player((GameState) null, "V9-JRH^|OQPa/]T[_|");
      ArrayList<Card> arrayList0 = player0.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      player1.playKingdomCard();
      player0.discard = null;
      player0.buyCard((GameState) null);
      player0.numActions = 8;
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 5;
      player0.toString();
      Player player1 = new Player((GameState) null, " --- --------------------------- --- ");
      ArrayList<Card> arrayList0 = player1.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      player0.coins = 5;
      player0.playKingdomCard();
      player0.coins = 26;
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((GameState) null, " --- --------------------------- --- ");
      player0.endTurn();
      player0.coins = 5;
      ArrayList<Card> arrayList0 = player0.playedCards;
      GameState gameState0 = new GameState(arrayList0);
      player0.buyCard(gameState0);
      player0.discard = null;
      player0.numActions = 5;
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player((GameState) null, "S");
      player0.playTreasureCard();
      int int0 = player0.numActions;
      Card card0 = player0.drawCard();
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "|:h6b");
      gameState0.addPlayer(player0);
      player0.playKingdomCard();
      player0.endTurn();
      player0.buyCard(gameState0);
  }
}
