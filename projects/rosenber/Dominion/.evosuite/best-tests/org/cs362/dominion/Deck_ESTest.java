/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 06:03:09 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.cs362.dominion.Card;
import org.cs362.dominion.Deck;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Deck_ESTest extends Deck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player("", true);
      Deck deck0 = player0.deck;
      deck0.embargoCounter = 3;
      deck0.addTop((Card) null);
      deck0.deck.add((Card) null);
      // Undeclared exception!
      try { 
        deck0.shuffle();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player("", true);
      Deck deck0 = player0.deck;
      deck0.addTop((Card) null);
      deck0.deck.add((Card) null);
      deck0.deck.add((Card) null);
      // Undeclared exception!
      try { 
        deck0.shuffle();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.addBottom((Card) null);
      deck0.removeTop();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.deck.add((Card) null);
      deck0.removeBottom();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player("", true);
      player0.deck.addTop((Card) null);
      Card card0 = player0.deck.getTop();
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player("5)+`qK3QbX0M", true);
      Deck deck0 = player0.deck;
      deck0.addTop((Card) null);
      deck0.getSpecific((Card) null);
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Deck deck0 = new Deck("Aack");
      deck0.getName();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Deck deck0 = new Deck("");
      deck0.getName();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player("", true);
      Deck deck0 = player0.deck;
      deck0.embargoCounter = 1658;
      int int0 = deck0.getEmbargos();
      assertEquals(1658, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.deck.add((Card) null);
      deck0.getBottom();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Deck deck0 = new Deck();
      Player player0 = new Player("`y~{Q!NybRdBOQ./C(a", false);
      Card card0 = player0.playCard();
      deck0.deck.add(card0);
      deck0.getBottom();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player("5~G;e}!;+d-GZ;", false);
      Deck deck0 = player0.deck;
      deck0.addBottom((Card) null);
      deck0.findSpecific((Card) null);
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player("5~G;e}!;+d-GZ;", false);
      Card card0 = player0.playCard();
      player0.discard.addBottom(card0);
      Card card1 = player0.discard.findSpecific(card0);
      assertSame(card0, card1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.deck.add((Card) null);
      deck0.drawTop();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player("5~G;e}!;+d-GZ;", false);
      Card card0 = player0.playCard();
      player0.deck.addBottom(card0);
      Card card1 = player0.deck.drawTop();
      assertSame(card1, card0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player("", true);
      Deck deck0 = player0.deck;
      deck0.addTop((Card) null);
      deck0.drawBottom();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player("", false);
      Deck deck0 = player0.discard;
      deck0.deck = null;
      // Undeclared exception!
      try { 
        deck0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Deck deck0 = new Deck();
      // Undeclared exception!
      try { 
        deck0.findSpecific((-1119));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Deck deck0 = new Deck("");
      deck0.deck = null;
      // Undeclared exception!
      try { 
        deck0.drawBottom();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Deck deck0 = new Deck();
      // Undeclared exception!
      try { 
        deck0.removeTop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Deck deck0 = new Deck();
      // Undeclared exception!
      try { 
        deck0.getBottom();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Deck deck0 = new Deck();
      Player player0 = new Player("`y~{Q!NybRdBOQ./C(a", false);
      Card card0 = player0.playCard();
      deck0.deck.add(card0);
      deck0.getSpecific(card0);
      deck0.addTop(card0);
      deck0.drawBottom();
      boolean boolean0 = deck0.isCard(card0);
      assertEquals(0, deck0.getEmbargos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player("", true);
      player0.deck.addTop((Card) null);
      boolean boolean0 = player0.deck.isCard((Card) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player("", true);
      player0.deck.shuffle();
      assertEquals("", player0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Deck deck0 = new Deck();
      // Undeclared exception!
      try { 
        deck0.findSpecific(1637);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1637, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Deck deck0 = new Deck();
      int int0 = deck0.getEmbargos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.setName("Year");
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Deck deck0 = new Deck();
      // Undeclared exception!
      try { 
        deck0.removeBottom();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player("c?/4FR//?l", false);
      int int0 = player0.discard.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player("5~G;e}!;+d-GZ;", false);
      // Undeclared exception!
      try { 
        player0.deck.drawBottom();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Deck deck0 = new Deck((String) null);
      deck0.getName();
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player("5~G;e}!;+d-GZ;", false);
      Card card0 = player0.playCard();
      // Undeclared exception!
      try { 
        player0.discard.getSpecific(card0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Deck deck0 = new Deck();
      // Undeclared exception!
      try { 
        deck0.drawTop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player("c?/4FR//?l", false);
      Card card0 = player0.playCard();
      player0.discard.addTop(card0);
      int int0 = player0.discard.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player("", true);
      // Undeclared exception!
      try { 
        player0.deck.getTop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.removeSpecific((Card) null);
      assertEquals(0, deck0.getEmbargos());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player("c?/4FR//?l", false);
      Card card0 = player0.playCard();
      // Undeclared exception!
      try { 
        player0.deck.findSpecific(card0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.addEmbargos((-1350));
      int int0 = deck0.getEmbargos();
      assertEquals((-1350), int0);
  }
}
