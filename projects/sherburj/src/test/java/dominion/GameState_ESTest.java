/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 05:27:58 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      GameState gameState2 = gameState0.clone();
      gameState2.isGameOver();
      gameState2.toString();
      gameState1.toString();
      MockRandom mockRandom0 = new MockRandom();
      gameState1.randomGenerator = (Random) mockRandom0;
      gameState1.gameBoard = gameState2.gameBoard;
      gameState2.play();
      gameState2.toString();
      Card.Type.values();
      gameState0.isGameOver();
      gameState2.randomGenerator = null;
      GameState gameState3 = new GameState(gameState0.cards);
      gameState0.players = gameState1.players;
      gameState3.gameBoard = gameState1.gameBoard;
      gameState0.clone();
      Player player0 = new Player(gameState2, "The board game is embty you need to intialize the game!!!!");
      Player player1 = player0.clone();
      player0.drawCard();
      player1.drawType((Card) null);
      player1.drawType((Card) null);
      gameState3.addPlayer(player1);
      gameState2.toString();
      gameState3.play();
      GameState gameState4 = new GameState(gameState1.cards);
      gameState1.getWinners();
      gameState0.isGameOver();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      LinkedList<Player> linkedList1 = new LinkedList<Player>();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      gameState0.players = (List<Player>) linkedList1;
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(linkedList0, card_Type0);
      GameState gameState1 = new GameState(list0);
      MockRandom mockRandom0 = (MockRandom)gameState1.randomGenerator;
      gameState0.randomGenerator = (Random) mockRandom0;
      Player player0 = new Player(gameState1, (String) null);
      gameState1.gameBoard = hashMap0;
      gameState0.clone();
      gameState0.addPlayer(player0);
      gameState0.getWinners();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Player: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.Player: 
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.toString();
      gameState0.initializeGame();
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      MockRandom mockRandom0 = (MockRandom)gameState0.randomGenerator;
      gameState0.randomGenerator = (Random) mockRandom0;
      gameState0.addPlayer((Player) null);
      gameState0.players = null;
      gameState0.players = null;
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.cards = null;
      gameState0.players = null;
      // Undeclared exception!
      try { 
        gameState0.addPlayer((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      gameState0.initializeGame();
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.getWinners();
      MockRandom mockRandom0 = (MockRandom)gameState0.randomGenerator;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.Type.values();
      org.evosuite.runtime.Random.setNextRandom(1461);
      // Undeclared exception!
      try { 
        Card.CardName.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Player player0 = new Player(gameState0, (String) null);
      Player player1 = player0.clone();
      player1.drawCard();
      gameState0.play();
      Integer integer0 = new Integer((-1055));
      hashMap0.put((Card) null, integer0);
      gameState0.isGameOver();
      gameState0.gameBoard = hashMap0;
      Integer integer1 = new Integer((-2819));
      hashMap0.replace((Card) null, integer1);
      gameState0.play();
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.play();
      GameState gameState1 = gameState0.clone();
      gameState1.initializeGame();
      gameState0.players = gameState1.players;
      Player player0 = new Player(gameState0, "No action cards to play");
      gameState0.addPlayer(player0);
      gameState0.gameBoard = gameState1.gameBoard;
      gameState0.addPlayer((Player) null);
      Card.Type.values();
      GameState gameState2 = new GameState(list0);
      Card.CardName.values();
      GameState gameState3 = gameState2.clone();
      Card.CardName.values();
      gameState3.gameBoard = gameState0.gameBoard;
      gameState2.toString();
      gameState2.players = gameState1.players;
      gameState2.gameBoard = gameState3.gameBoard;
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      player0.drawCard();
      Integer integer0 = new Integer(4219);
      hashMap0.put((Card) null, integer0);
      gameState2.gameBoard = hashMap0;
      gameState2.randomGenerator = null;
      gameState3.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState1.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.toString();
      HashMap<Player, Integer> hashMap0 = new HashMap<Player, Integer>();
      gameState0.addPlayer((Player) null);
      gameState0.toString();
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }
}
