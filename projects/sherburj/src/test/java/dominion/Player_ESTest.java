/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 05:24:36 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      Player player1 = player0.clone();
      player1.playedCards = null;
      int int0 = player1.numBuys;
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.gain((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.numBuys = 500;
      Player player1 = player0.clone();
      player1.drawCard();
      List<Card> list0 = player0.playedCards;
      player1.tempcoins = (-1);
      player0.playedCards = list0;
      player0.buyCard((GameState) null);
      player0.toString();
      player1.buyCard((GameState) null);
      // Undeclared exception!
      try { 
        player1.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      player0.numBuys = 21;
      List<Card> list0 = player0.discard;
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      int int0 = player0.tempcoins;
      player0.tempcoins = (-1095);
      player0.drawCard();
      gameState0.toString();
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.numBuys = 500;
      Player player1 = player0.clone();
      player1.coins = 500;
      List<Card> list0 = player0.playedCards;
      player0.playedCards = list0;
      player0.buyCard((GameState) null);
      player0.toString();
      // Undeclared exception!
      try { 
        player1.buyCard((GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      player0.player_username = "";
      gameState0.initializeGame();
      gameState0.initializeGame();
      player0.discard = gameState0.cards;
      gameState0.players = gameState1.players;
      Player player1 = player0.clone();
      int int0 = player0.coins;
      player0.toString();
      player0.drawCard();
      player1.coins = 0;
      player0.scoreFor(gameState1);
      player0.playTreasureCard();
      player0.playKingdomCard();
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      player0.player_username = "";
      gameState0.initializeGame();
      player0.discard = gameState0.cards;
      Player player1 = player0.clone();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player1.deck = linkedList0;
      int int0 = player0.coins;
      Card card0 = player1.drawCard();
      linkedList0.offer(card0);
      player0.toString();
      Card card1 = player1.drawType(card0);
      player0.gain(card1);
      player1.coins = 0;
      player0.scoreFor(gameState1);
      player0.playTreasureCard();
      player1.discard(card0);
      player0.playKingdomCard();
      player1.player_username = " ---  ---  --- --------------------------- --- Hand: []Discard: [ \n\tGold,  \n\tSilver,  \n\tCopper,  \n\tProvince,  \n\tDuchy,  \n\tEstate,  \n\tCurse,  \n\tAdventurer,  \n\tSmithy,  \n\tVillage,  \n\tBureaucrat,  \n\tCellar,  \n\tChancellor,  \n\tChapel,  \n\tCouncil_Room,  \n\tFeast,  \n\tFestival,  \n\tGardens,  \n\tLaboratory,  \n\tMarket,  \n\tMilitia,  \n\tWoodcutter]Deck: []Played Cards: []numActions: 0coins: 0numBuys: 0\n";
      player1.discardType(card1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, ":Z}u4$\"CWww9G&/^OLP");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      MockRandom mockRandom0 = (MockRandom)player0.randomGenerator;
      player0.randomGenerator = (Random) mockRandom0;
      player0.buyCard((GameState) null);
      player0.tempcoins = 46;
      player0.player_username = "";
      int int0 = player0.tempcoins;
      player0.toString();
      player0.drawCard();
      player0.discard((Card) null);
      List<Card> list0 = player0.discard;
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      MockRandom mockRandom0 = new MockRandom(0L);
      gameState0.randomGenerator = (Random) mockRandom0;
      gameState0.getWinners();
      Player player0 = new Player(gameState0, "B?KY1|N/iFjihAY");
      Player player1 = player0.clone();
      linkedList0.removeAll(gameState0.players);
      player1.drawCard();
      player1.drawType((Card) null);
      player1.playKingdomCard();
      int int0 = player1.tempcoins;
      player0.drawType((Card) null);
      player0.drawType((Card) null);
      player0.deck = linkedList0;
      gameState0.cards = (List<Card>) player0.deck;
      gameState0.isGameOver();
      player0.playTreasureCard();
      player0.randomGenerator = gameState0.randomGenerator;
      List<Card> list0 = player0.discard;
      Card.Type.values();
      int int1 = player1.tempcoins;
      linkedList0.add((Card) null);
      // Undeclared exception!
      try { 
        player1.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(3);
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "TREASURE");
      player0.scoreFor(gameState0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((GameState) null, "<o");
      player0.clone();
      // Undeclared exception!
      try { 
        player0.scoreFor((GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Stack<Player> stack1 = new Stack<Player>();
      gameState0.players = (List<Player>) stack1;
      Player player0 = new Player(gameState0, (String) null);
      stack0.removeElement(player0);
      GameState gameState1 = new GameState((List<Card>) stack0);
      Player player1 = new Player(gameState1, "S2rvqUL<a,_3s(R1?");
      player1.drawCard();
      gameState1.cards = (List<Card>) stack0;
      gameState1.clone();
      stack0.add((Card) null);
      Player player2 = player1.clone();
      // Undeclared exception!
      try { 
        player2.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Drawing new hand: ");
      // Undeclared exception!
      try { 
        player0.discardType((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.numActions = 57;
      Player player1 = player0.clone();
      player1.toString();
      player1.playKingdomCard();
      int int0 = player1.numBuys;
      List<Card> list0 = player0.hand;
      player1.hand = list0;
      int int1 = player0.numActions;
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((GameState) null, "coins: ");
      Player player1 = player0.clone();
      player1.numActions = 833;
      player0.numActions = 400;
      MockRandom mockRandom0 = (MockRandom)player0.randomGenerator;
      player1.randomGenerator = (Random) mockRandom0;
      player0.numActions = (-1);
      player1.playTreasureCard();
      MockRandom mockRandom1 = (MockRandom)player0.randomGenerator;
      player0.randomGenerator = (Random) mockRandom1;
      player1.tempcoins = (-1143);
      player1.drawType((Card) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((GameState) null, "a0s5Z/&|");
      player0.clone();
      player0.numBuys = (-564);
      player0.buyCard((GameState) null);
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState0.play();
      Player player0 = new Player(gameState1, "");
      gameState0.initializeGame();
      gameState0.initializeGame();
      player0.discard = gameState0.cards;
      Player player1 = player0.clone();
      Player player2 = player0.clone();
      Card card0 = player1.drawCard();
      Card card1 = player1.drawType(card0);
      player2.discardType(card1);
      player0.toString();
      gameState1.gameBoard = gameState0.gameBoard;
      player0.scoreFor(gameState1);
      player0.playTreasureCard();
      player0.playedCards = gameState0.cards;
      player2.playTreasureCard();
      player0.toString();
      player1.tempcoins = 11;
      player0.toString();
      player0.tempcoins = 11;
      player1.initializePlayerTurn();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, (String) null);
      List<Card> list0 = player0.discard;
      player0.drawCard();
      player0.toString();
      player0.gain((Card) null);
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      GameState gameState1 = gameState0.clone();
      gameState1.initializeGame();
      gameState1.gameBoard = gameState0.gameBoard;
      gameState0.getWinners();
      Player player0 = new Player(gameState1, "_EJs0Lg75!jZ3c>pog");
      player0.clone();
      player0.tempcoins = 16;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "&>l^OKd+jr`{E]\")";
      Player player0 = new Player((GameState) null, "&>l^OKd+jr`{E]\")");
      player0.playedCards = null;
      // Undeclared exception!
      try { 
        player0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.Type.values();
      Player player0 = new Player((GameState) null, (String) null);
      player0.tempcoins = (-1017);
      Player player1 = player0.clone();
      player1.player_username = null;
      player1.playTreasureCard();
      Player player2 = new Player((GameState) null, (String) null);
      player0.coins = 3;
      player2.playKingdomCard();
      Player player3 = new Player((GameState) null, (String) null);
      player3.tempcoins = (-1834);
      player2.playKingdomCard();
      List<Card> list0 = player2.playedCards;
      Player player4 = new Player((GameState) null, "j");
      player4.discard = list0;
      List<Card> list1 = player2.discard;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((GameState) null, "kCtG3=/)m2]}\"sZj");
      Player player1 = player0.clone();
      List<Card> list0 = player0.hand;
      player0.discard = list0;
      player0.initializePlayerTurn();
      int int0 = (-449);
      player1.tempcoins = int0;
      player0.drawCard();
      int int1 = player1.numActions;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      LinkedList<Card> linkedList0 = player0.deck;
      int int0 = 500;
      player0.numBuys = 500;
      Player player1 = player0.clone();
      List<Card> list0 = player0.playedCards;
      player0.playedCards = list0;
      player0.buyCard((GameState) null);
      player0.toString();
      player1.buyCard((GameState) null);
      // Undeclared exception!
      try { 
        player1.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "u(-Pb2?dTl+%,bfK%");
      Player player1 = player0.clone();
      List<Card> list1 = player1.playedCards;
      player1.drawCard();
      player0.numActions = 43;
      player1.trash((Card) null);
      player0.playTreasureCard();
      player1.drawType((Card) null);
      player1.trash((Card) null);
      player0.playKingdomCard();
      player0.buyCard(gameState0);
      player0.printStateGame();
      Player player2 = new Player(gameState0, "");
      List<Card> list2 = player2.playedCards;
      int int0 = player0.scoreFor(gameState0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      gameState0.initializeGame();
      gameState0.initializeGame();
      player0.discard = gameState0.cards;
      Player player1 = player0.clone();
      int int0 = player0.coins;
      Player player2 = player0.clone();
      player0.initializePlayerTurn();
      Card card0 = player1.drawCard();
      player0.toString();
      Card card1 = player0.drawCard();
      card0.compareTo(card1);
      gameState1.gameBoard = gameState0.gameBoard;
      Card card2 = player1.drawType(card0);
      player0.gain(card2);
      player1.coins = (-5);
      player0.scoreFor(gameState1);
      player0.playTreasureCard();
      player1.discard(card0);
      player0.playedCards = gameState0.cards;
      player1.drawType(card0);
      player2.playTreasureCard();
      player2.endTurn();
      player0.clone();
      assertEquals(4, list0.size());
  }
}
