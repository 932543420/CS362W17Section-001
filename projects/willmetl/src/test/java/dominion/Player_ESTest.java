/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 14 18:12:27 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[8];
      Player player0 = new Player("-", gameState0, false);
      playerArray0[0] = player0;
      Player player1 = new Player(".\n", gameState0, false);
      playerArray0[1] = player1;
      Player player2 = new Player("", player0.gameState);
      playerArray0[2] = player2;
      Player player3 = new Player("'s hand:", player1.gameState);
      playerArray0[3] = player3;
      GameState gameState1 = new GameState();
      Player player4 = new Player("w", gameState1, true);
      playerArray0[4] = player4;
      Player player5 = new Player((String) null, player0.gameState, false);
      playerArray0[5] = player5;
      Player player6 = new Player("w", player3.gameState);
      playerArray0[6] = player6;
      Player player7 = new Player("h}MZp@~8}n9", player3.gameState);
      playerArray0[7] = player7;
      gameState0.players = playerArray0;
      Player player8 = new Player((String) null, gameState0, false);
      player8.addBuys((-1939));
      player8.countVictoryPoints();
      player8.getBuys();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("f9=4;F1r\"v)");
      Card card0 = Card.GREAT_HALL;
      gameState0.takeCard(card0);
      Player player0 = new Player("", gameState0);
      Card card1 = Card.MINE;
      player0.putInHand(card1);
      Card card2 = Card.DUCHY;
      Player[] playerArray0 = new Player[7];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      gameState0.players = playerArray0;
      player0.draw();
      gameState0.addCard(card2);
      Card card3 = Card.FEAST;
      // Undeclared exception!
      try {
        player0.playCard(card3);
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[8];
      Player player0 = new Player("A %s costs %d but you only have %d money. ur broke.\n", gameState0, true);
      playerArray0[0] = player0;
      Player player1 = new Player("A %s costs %d but you only have %d money. ur broke.\n", gameState0);
      playerArray0[1] = player1;
      Player player2 = new Player("J]/2vL_A", player0.gameState, true);
      playerArray0[2] = player2;
      Player player3 = new Player("+`%#s", player2.gameState, true);
      playerArray0[3] = player3;
      GameState gameState1 = new GameState();
      Player player4 = new Player("Please choose an Action card from your hand.", gameState1, true);
      playerArray0[4] = player4;
      Player player5 = new Player("J]/2vL_A", player0.gameState, true);
      playerArray0[5] = player5;
      Player player6 = new Player("A %s costs %d but you only have %d money. ur broke.\n", player3.gameState);
      playerArray0[6] = player6;
      GameState gameState2 = new GameState();
      gameState2.listCards();
      gameState0.addPlayer("J]/2vL_A");
      Player player7 = new Player("<j)ur", gameState2);
      playerArray0[7] = player7;
      gameState0.players = playerArray0;
      Player player8 = new Player("A %s costs %d but you only have %d money. ur broke.\n", gameState0);
      Card card0 = player8.draw();
      Random.setNextRandom((-1673));
      player6.isCardInHand(card0);
      player5.takeFreeCard(card0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[9];
      Player player0 = new Player("", gameState0);
      playerArray0[0] = player0;
      Player player1 = new Player("", gameState0);
      playerArray0[1] = player1;
      Player player2 = new Player("", player0.gameState);
      playerArray0[2] = player2;
      Player player3 = new Player("", player1.gameState, false);
      player2.discardFromHand();
      gameState0.addPlayer("");
      playerArray0[3] = player3;
      Player player4 = new Player("", gameState0, true);
      playerArray0[4] = player4;
      Player player5 = new Player("", player4.gameState, false);
      playerArray0[5] = player5;
      Player player6 = new Player("", gameState0);
      playerArray0[6] = player6;
      Player player7 = null;
      try {
        player7 = new Player("", player0.gameState, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?%)*vY`G");
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      Card card0 = Card.PROVINCE;
      player0.discard(card0);
      Card card1 = Card.EMBARGO;
      gameState0.takeCard(card0);
      gameState0.addPlayer("ZARe", true);
      player0.discard(card1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Scanner scanner0 = player0.scan;
      player0.shuffle();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      player0.gameState = null;
      player0.seeDeck();
      Card card2 = Card.CURSE;
      // Undeclared exception!
      try {
        player0.returnCardToShared(card2);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("4Kh.j<K3vFi");
      GameState gameState0 = new GameState();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player("AA4|w[M;5K.g<@/Y;s", gameState0);
      player0.scan = null;
      gameState0.addPlayer(player0);
      player0.countVictoryPoints();
      Card card0 = Card.ADVENTURER;
      player0.playCard(card0);
      gameState0.numPlayers = 4377;
      player0.getBuys();
      player0.getHandSize();
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try {
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer("", false);
      player0.seeHand();
      player0.addActions(0);
      Card card0 = Card.COUNCILROOM;
      Player player1 = new Player("Vq3jm/p", gameState0, false);
      player0.playCard(card0, player1);
      player1.addBuys((-1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("", true);
      Player player0 = new Player("", gameState0, false);
      player0.getHandSize();
      Player[] playerArray0 = new Player[9];
      playerArray0[0] = player0;
      gameState0.addPlayer("+2 money.  Trash this card.  Put an Embargo token on top of a supply pile.  When any player buys that card, he gains a Curse card per Embargo token", true);
      playerArray0[1] = player0;
      gameState0.numPlayers = 5;
      Card card0 = Card.ADVENTURER;
      player0.playCard(card0, player0);
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      playerArray0[6] = player0;
      playerArray0[7] = player0;
      playerArray0[8] = player0;
      gameState0.players = playerArray0;
      SystemInUtil.addInputLine("+2 money.  Trash this card.  Put an Embargo token on top of a supply pile.  When any player buys that card, he gains a Curse card per Embargo token");
      player0.countAllCards();
      player0.newTurn();
      player0.getBuys();
      player0.countAllCards();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("$FUgML~pU{_V");
      Player player0 = new Player("&+^GnZ*O)wz%3.S,x", gameState0);
      gameState0.addPlayer("");
      player0.addActions((-1861));
      player0.discardFromHand();
      Card.Type card_Type0 = Card.Type.VICTORY;
      // Undeclared exception!
      try {
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("", true);
      Player player0 = new Player("", gameState0, false);
      player0.getHandSize();
      Player[] playerArray0 = new Player[9];
      player0.scan = null;
      playerArray0[0] = player0;
      gameState0.addPlayer("+2 money.  Trash this card.  Put an Embargo token on top of a supply pile.  When any player buys that card, he gains a Curse card per Embargo token", true);
      playerArray0[1] = player0;
      gameState0.numPlayers = 5;
      Card card0 = Card.ADVENTURER;
      player0.playCard(card0, player0);
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      playerArray0[6] = player0;
      playerArray0[7] = player0;
      playerArray0[8] = player0;
      gameState0.players = playerArray0;
      player0.countAllCards();
      // Undeclared exception!
      try {
        player0.newTurn();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.SALVAGER;
      gameState0.takeCard(card0);
      Player player0 = new Player("", gameState0, false);
      player0.seeDeck();
      Card card1 = Card.MINE;
      gameState0.countCard(card1);
      Card card2 = Card.PROVINCE;
      player0.takeFreeCard(card2);
      player0.putInHand(card2);
      GameState gameState1 = player0.gameState;
      Card card3 = Card.GREAT_HALL;
      player0.addActions(0);
      player0.isCardInHand(card3);
      player0.countVictoryPoints();
      Player player1 = new Player("|ldD=6N%n\"sb", gameState0);
      player0.playCard(card2, player1);
      Card card4 = Card.EMBARGO;
      player1.playCard(card4, player0);
      player1.discardFromHand();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      player1.takeFreeCard(card4);
      player0.discardFromHand();
      Card card5 = Card.GARDENS;
      player0.discard(card5);
      Card card6 = Card.COPPER;
      player0.playCard(card6);
      player1.discardFromHand();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((String) null);
      gameState0.listCards();
      Player player0 = new Player("M=V,k", gameState0, true);
      player0.shuffle();
      player0.newTurn();
      gameState0.addPlayer(player0);
      Player player1 = new Player((String) null, gameState0, true);
      player1.newTurn();
      player0.discardFromHand();
      Card card0 = Card.VILLAGE;
      player1.draw();
      player1.takeFreeCard(card0);
      player1.scan = player0.scan;
      player1.getBuys();
      Card card1 = Card.SILVER;
      player1.returnCardToShared(card1);
      Card card2 = Card.VILLAGE;
      player0.playCard(card2);
      player0.addBuys(0);
      Card.Type.values();
      Player player2 = new Player("", player0.gameState, true);
      player2.draw();
      Card.Type.values();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemInUtil.addInputLine("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.oro.text.MalformedCachePatternException");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%s chose %s.\n");
      GameState gameState0 = new GameState();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player0 = new Player("", gameState0, true);
      player0.addActions((-3187));
      gameState0.players = null;
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.chooseTypeOfCard(card_Type0);
      GameState gameState1 = player0.gameState;
      player0.putInHand((Card) null);
      Random.setNextRandom(0);
      player0.getHandSize();
      player0.countAllCards();
      MockRandom mockRandom0 = (MockRandom)player0.rand;
      // Undeclared exception!
      try {
        player0.countVictoryPoints();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("+JJXLX0,<Kx,8>", gameState0);
      Card card0 = Card.ADVENTURER;
      player0.discard(card0);
      player0.addActions((-779));
      player0.countAllCards();
      Scanner scanner0 = player0.scan;
      Card card1 = Card.CURSE;
      Card card2 = Card.CURSE;
      gameState0.countCard(card2);
      gameState0.listCards();
      player0.returnCardToShared(card1);
      player0.addBuys((-1797));
      player0.isCardInHand(card1);
      player0.getActions();
      player0.takeFreeCard(card0);
      player0.countVictoryPoints();
      player0.countAllCards();
      player0.shuffle();
      Card card3 = Card.EMBARGO;
      player0.isCardInHand(card3);
      player0.takeFreeCard(card1);
      player0.newTurn();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[9];
      Player player0 = new Player("", gameState0);
      playerArray0[0] = player0;
      Player player1 = new Player("", gameState0);
      playerArray0[1] = player1;
      Player player2 = new Player("", player0.gameState);
      playerArray0[2] = player2;
      Player player3 = new Player("", player1.gameState, false);
      playerArray0[3] = player3;
      Player player4 = new Player("", gameState0, true);
      playerArray0[4] = player4;
      Player player5 = new Player("", player4.gameState, false);
      playerArray0[5] = player5;
      Player player6 = new Player("", player3.gameState, false);
      playerArray0[6] = player6;
      Player player7 = new Player("", player0.gameState, false);
      playerArray0[7] = player7;
      Player player8 = null;
      try {
        player8 = new Player("", player3.gameState);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.numPlayers = 1933;
      Card card0 = Card.MINE;
      gameState0.addCard(card0);
      Card card1 = Card.COUNCILROOM;
      gameState0.takeCard(card1);
      Player player0 = new Player((String) null, gameState0, true);
      player0.discardFromHand();
      gameState0.countCard(card1);
      player0.addMoney((-1114));
      player0.countAllCards();
      Card card2 = Card.SALVAGER;
      player0.discardFromHand(card2);
      player0.addActions(0);
      player0.draw();
      player0.shuffle();
      player0.toString();
      player0.countVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      Card card0 = Card.AMBASSADOR;
      player0.returnCardToShared(card0);
      player0.addMoney((-1369));
      player0.countAllCards();
      Card card1 = Card.SILVER;
      player0.addMoney(0);
      player0.takeFreeCard(card1);
      gameState0.addPlayer("");
      Card card2 = Card.MINE;
      player0.takeFreeCard(card2);
      player0.addBuys((-5575));
      player0.getMoney();
      MockRandom mockRandom0 = (MockRandom)player0.rand;
      player0.seeDeck();
      Card.Type.values();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.numPlayers = 0;
      gameState0.addPlayer("\"+P{cc5ucK#R", false);
      Player player0 = new Player("\"+P{cc5ucK#R", gameState0, true);
      player0.getHandSize();
      Card card0 = Card.COUNCILROOM;
      player0.discard(card0);
      Card card1 = player0.draw();
      player0.getBuys();
      Card card2 = Card.SALVAGER;
      player0.playCard(card2);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.chooseTypeOfCard(card_Type0);
      Player player1 = new Player("\"+P{cc5ucK#R", player0.gameState, true);
      player0.playCard(card1, player1);
      player0.playCard(card0, player1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("uMAbs%Ue)&TF<&#", gameState0, true);
      Card card0 = Card.BARON;
      player0.countVictoryPoints();
      player0.seeHand();
      gameState0.numPlayers = (-2228);
      player0.playCard(card0);
      gameState0.listCards();
      player0.countVictoryPoints();
      player0.addActions(0);
      gameState0.listCards();
      player0.addBuys(0);
      player0.seeHand();
      gameState0.listCards();
      player0.newTurn();
      player0.takeFreeCard(card0);
      player0.discardFromHand();
      // Undeclared exception!
      try {
        gameState0.addPlayer("uMAbs%Ue)&TF<&#", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2228
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.listCards();
      Card card0 = Card.GARDENS;
      gameState0.addCard(card0);
      Player player0 = new Player((String) null, gameState0, true);
      player0.addMoney(0);
      gameState0.addPlayer("&^I0}})", true);
      Card card1 = Card.ADVENTURER;
      player0.discardFromHand(card1);
      player0.seeHand();
      player0.seeDeck();
      player0.seeDeck();
      player0.draw();
      player0.addBuys((-4623));
      player0.putInHand(card0);
      player0.getMoney();
      gameState0.addPlayer((String) null);
      player0.chooseHand();
      player0.getName();
      player0.countVictoryPoints();
      Card card2 = Card.CUTPURSE;
      player0.discard(card2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("kjvBS", gameState0);
      player0.seeHand();
      player0.countVictoryPoints();
      player0.seeDeck();
      player0.getName();
      Card card0 = Card.SALVAGER;
      player0.discard(card0);
      gameState0.addPlayer("fq;%/G2$y%s6Agc.n&", true);
      player0.scan = null;
      Player[] playerArray0 = new Player[6];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      GameState gameState1 = new GameState();
      Player player1 = new Player("", gameState1, false);
      playerArray0[2] = player1;
      Player player2 = new Player("Rv{", gameState1, false);
      playerArray0[3] = player2;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      gameState0.players = playerArray0;
      // Undeclared exception!
      try {
        player0.chooseHand();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("#B=S^[#mn0_.wVmlNo5", gameState0);
      Card card0 = Card.COUNCILROOM;
      Player player1 = new Player("}?BkiH&", player0.gameState);
      // Undeclared exception!
      try {
        player0.playCard(card0, player1);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("pm%Y5", gameState0);
      player0.addBuys((-1618));
      player0.getHandSize();
      Player player1 = new Player("pm%Y5", player0.gameState);
      player1.rand = player0.rand;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, false);
      Card card0 = Card.SILVER;
      player0.discard(card0);
      Card card1 = Card.CUTPURSE;
      // Undeclared exception!
      try {
        player0.playCard(card1);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      Card card0 = Card.PROVINCE;
      player0.draw();
      player0.addMoney(2537);
      player0.discardFromHand(card0);
      player0.chooseHand();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("");
      Player player0 = new Player("C(XX+e#5!7>pIju", gameState0, false);
      Card card0 = Card.COUNCILROOM;
      player0.playCard(card0);
      player0.getActions();
      // Undeclared exception!
      try {
        player0.chooseHand();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      player0.scan = null;
      player0.draw();
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.chooseTypeOfCard(card_Type0);
      player0.seeDeck();
      player0.getActions();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("Qty", gameState0);
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.numPlayers = 7;
      gameState0.addPlayer("ZwP9F");
      Player player0 = new Player("ZwP9F", gameState0, false);
      Card card0 = Card.FEAST;
      player0.putInHand(card0);
      Card card1 = Card.ESTATE;
      player0.discardFromHand(card1);
      player0.discardFromHand();
      Card card2 = Card.MINE;
      gameState0.addCard(card2);
      player0.draw();
      GameState gameState1 = new GameState();
      gameState1.players = gameState0.players;
      // Undeclared exception!
      try {
        gameState1.nextTurn();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("Thanks for playing!", gameState0);
      Card card0 = Card.BARON;
      player0.gameState = gameState0;
      gameState0.numPlayers = 1522;
      player0.putInHand(card0);
      player0.playCard(card0);
      player0.countVictoryPoints();
      GameState gameState1 = player0.gameState;
      Player player1 = new Player("Thanks for playing!", gameState1);
      Card card1 = Card.AMBASSADOR;
      player1.isCardInHand(card1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.ADVENTURER;
      gameState0.addCard(card0);
      Player player0 = new Player(" -bNnlPQ4/@E", gameState0);
      player0.addBuys(0);
      player0.countAllCards();
      Card card1 = Card.MINE;
      player0.draw();
      // Undeclared exception!
      try {
        player0.playCard(card1);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("", false);
      Player player0 = new Player("", gameState0);
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = null;
      try {
        player0 = new Player("L]h+1d6F|", (GameState) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("dominion.Card$3", gameState0);
      gameState0.playerTurn = 60;
      Card card0 = Card.ADVENTURER;
      player0.discardFromHand(card0);
      gameState0.countCard(card0);
      Card card1 = Card.MINE;
      gameState0.numPlayers = 60;
      gameState0.playerTurn = 60;
      // Undeclared exception!
      try {
        player0.playCard(card1, (Player) null);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = null;
      try {
        player0 = new Player("+2 money.  Each other player discards a Copper card or reveals a hand with no Copper.", (GameState) null, false);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0);
      // Undeclared exception!
      try {
        player0.newTurn();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Card.Type.values();
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, false);
      player0.getName();
      Player player1 = new Player("", player0.gameState);
      // Undeclared exception!
      try {
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("/]", gameState0, true);
      Card card0 = Card.PROVINCE;
      Player player1 = new Player("/]", player0.gameState);
      player0.playCard(card0, player1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, false);
      player0.addMoney(0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GameState gameState0 = new GameState();
      String string0 = "f9=4;F1r\"v)";
      SystemInUtil.addInputLine("f9=4;F1r\"v)");
      Card card0 = Card.GREAT_HALL;
      gameState0.takeCard(card0);
      Player player0 = new Player("", gameState0);
      Card card1 = Card.MINE;
      player0.putInHand(card1);
      Card card2 = Card.DUCHY;
      Player[] playerArray0 = new Player[4];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      gameState0.players = playerArray0;
      player0.draw();
      gameState0.addCard(card2);
      gameState0.numPlayers = (-2650);
      player0.discardFromHand();
      player0.countAllCards();
      // Undeclared exception!
      try {
        player0.chooseHand();
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GameState gameState0 = new GameState();
      String string0 = "f9=4;F1r\"v)";
      SystemInUtil.addInputLine("f9=4;F1r\"v)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player0 = new Player("", gameState0);
      Card card0 = Card.MINE;
      player0.putInHand(card0);
      Card card1 = Card.DUCHY;
      Player[] playerArray0 = new Player[4];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      gameState0.players = playerArray0;
      player0.draw();
      // Undeclared exception!
      try {
        player0.newTurn();
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "(+4i8Y8F";
      GameState gameState0 = new GameState();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Player player0 = new Player("(+4i8Y8F", gameState0, true);
      Card.Type card_Type0 = Card.Type.TREASURE;
      gameState0.numPlayers = 44;
      gameState0.playerTurn = 44;
      player0.chooseTypeOfCard(card_Type0);
      player0.getHandSize();
      Card card0 = Card.GARDENS;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((-1586.5141390252254), (double) 44);
      Card card1 = Card.GARDENS;
      player0.playCard(card1);
      // Undeclared exception!
      try {
        mockRandom0.ints(1785L, 46, 44);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Card.Type.values();
      String string0 = "J+PchV";
      GameState gameState0 = new GameState();
      Player player0 = new Player("J+PchV", gameState0, true);
      player0.discardFromHand();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Scanner scanner0 = new Scanner((InputStream) pipedInputStream0);
      player0.scan = scanner0;
      player0.discardFromHand();
      gameState0.addPlayer(player0);
      player0.getBuys();
      player0.chooseHand();
      pipedInputStream0.close();
      Card card0 = Card.MINE;
      player0.discard(card0);
      player0.discardFromHand();
      String string1 = ".\n";
      // Undeclared exception!
      try {
        Card.Type.valueOf(".\n");
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type..
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("%x*0k`S`tQ", gameState0, true);
      Card card0 = Card.EMBARGO;
      player0.playCard(card0);
      int int0 = gameState0.numPlayers;
      gameState0.addPlayer("");
      player0.addActions(475);
      player0.getMoney();
      player0.getHandSize();
      Card card1 = Card.ESTATE;
      player0.putInHand(card1);
      player0.countVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[8];
      Player player0 = new Player("A %s costs %d but you only have %d money. ur broke.\n", gameState0, true);
      playerArray0[0] = player0;
      Player player1 = new Player("A %s costs %d but you only have %d money. ur broke.\n", gameState0);
      playerArray0[1] = player1;
      Player player2 = new Player("J]/2vL_A", player0.gameState, true);
      playerArray0[2] = player2;
      Player player3 = new Player("+`%#s", player2.gameState, true);
      playerArray0[3] = player3;
      GameState gameState1 = new GameState();
      Player player4 = new Player("Please choose an Action card from your hand.", gameState1, true);
      playerArray0[4] = player4;
      Player player5 = new Player("J]/2vL_A", player0.gameState, true);
      playerArray0[5] = player5;
      Player player6 = new Player("J]/2vL_A", player1.gameState, true);
      playerArray0[6] = player6;
      GameState gameState2 = new GameState();
      gameState2.listCards();
      gameState0.addPlayer("J]/2vL_A");
      Player player7 = new Player("<bj)ur", gameState2);
      playerArray0[7] = player7;
      gameState0.players = playerArray0;
      Player player8 = new Player("A %s costs %d but you only have %d money. ur broke.\n", gameState0);
      Card card0 = player8.draw();
      Random.setNextRandom((-1673));
      player6.isCardInHand(card0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CUTPURSE;
      Player player0 = new Player("4Os\"2Z,4dN^#~Nl", gameState0, true);
      Card card1 = Card.CUTPURSE;
      player0.discard(card1);
      player0.gameState = gameState0;
      Card card2 = Card.MINE;
      Player player1 = new Player("'s turn:", player0.gameState, true);
      player1.newTurn();
      Card card3 = Card.COUNCILROOM;
      gameState0.countCard(card1);
      player1.takeFreeCard(card3);
      player0.playCard(card2, player1);
      Card card4 = Card.FEAST;
      gameState0.takeCard(card4);
      player1.discard(card0);
      MockRandom mockRandom0 = (MockRandom)player1.rand;
      player0.shuffle();
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.chooseTypeOfCard(card_Type0);
      player1.discardFromHand();
      player1.discard(card0);
      player1.getMoney();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Player player2 = new Player("e=5q[7Dr1(Mh]S-", player0.gameState, true);
      player0.gameState.takeCard(card3);
      player2.getActions();
      player0.playCard(card1);
      GameState gameState1 = new GameState();
      assertEquals(0, gameState1.numPlayers);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      GameState gameState0 = new GameState();
      gameState0.addPlayer("dominion.Card$11");
      Player player0 = new Player("dominion.Card$11", gameState0);
      Card card0 = Card.EMBARGO;
      gameState0.addCard(card0);
      player0.countVictoryPoints();
      gameState0.addPlayer("dominion.Card$11", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dominion.Card$11");
      player0.countVictoryPoints();
      // Undeclared exception!
      try {
        player0.chooseHand();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((String) null);
      gameState0.listCards();
      Player player0 = new Player("M=V,k", gameState0, true);
      player0.newTurn();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player1 = new Player((String) null, gameState0, true);
      Card card0 = Card.VILLAGE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player1.takeFreeCard(card0);
      player1.scan = player0.scan;
      player1.getBuys();
      Card card1 = Card.SILVER;
      player1.returnCardToShared(card1);
      Card card2 = Card.AMBASSADOR;
      Card card3 = Card.VILLAGE;
      player0.playCard(card3);
      player0.addBuys(0);
      player1.isCardInHand(card2);
      Card.Type.values();
      Player player2 = new Player("~R<@", player0.gameState, true);
      // Undeclared exception!
      try {
        Card.Type.valueOf((String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      gameState0.listCards();
      Card card0 = Card.DUCHY;
      player0.discardFromHand(card0);
      gameState0.addPlayer(player0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Card card1 = player0.draw();
      player0.seeDeck();
      gameState0.addPlayer("");
      player0.seeHand();
      Player player1 = new Player("", player0.gameState, true);
      player1.seeHand();
      GameState gameState1 = new GameState();
      player1.chooseHand();
      player0.chooseHand();
      player1.countVictoryPoints();
      Card.Type card_Type0 = Card.Type.ACTION;
      player1.chooseTypeOfCard(card_Type0);
      Card card2 = player1.draw();
      assertEquals(4, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("ze,h1#]?&xtUAeH*|", gameState0, true);
      player0.gameState = gameState0;
      Card card0 = Card.GARDENS;
      player0.takeFreeCard(card0);
      player0.gameState.listCards();
      player0.countVictoryPoints();
      Card card1 = Card.COPPER;
      player0.gameState.takeCard(card1);
      player0.getBuys();
      player0.seeDeck();
      player0.getName();
      gameState0.listCards();
      Player player1 = new Player("ze,h1#]?&xtUAeH*|", player0.gameState);
      player1.gameState = player0.gameState;
      player1.shuffle();
      MockRandom mockRandom0 = (MockRandom)player1.rand;
      String string0 = "'s hand:";
      // Undeclared exception!
      try {
        Card.Type.valueOf("'s hand:");
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.'s hand:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("|'-c", gameState0, true);
      player0.chooseHand();
      Card card0 = player0.chooseHand();
      Card.Type card_Type0 = Card.Type.TREASURE;
      player0.chooseTypeOfCard(card_Type0);
      player0.takeFreeCard(card0);
      player0.newTurn();
      card0.getVictoryPoints(player0);
      player0.addActions((-3731));
      player0.isCardInHand(card0);
      Card card1 = Card.PROVINCE;
      player0.putInHand(card1);
      player0.discard(card0);
      Card.Type.values();
      player0.seeHand();
      GameState gameState1 = new GameState();
      Player player1 = new Player("", gameState1, false);
      // Undeclared exception!
      try {
        player1.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("", true);
      Player player0 = new Player("", gameState0, false);
      player0.getHandSize();
      Player[] playerArray0 = new Player[9];
      playerArray0[0] = player0;
      gameState0.addPlayer("+2 money.  Trash this card.  Put an Embargo token on top of a supply pile.  When any player buys that card, he gains a Curse card per Embargo token", true);
      playerArray0[1] = player0;
      gameState0.numPlayers = 5;
      gameState0.nextTurn();
      Card card0 = Card.ADVENTURER;
      player0.playCard(card0, player0);
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      playerArray0[6] = player0;
      playerArray0[7] = player0;
      playerArray0[8] = player0;
      gameState0.players = playerArray0;
      player0.countAllCards();
      // Undeclared exception!
      try {
        player0.newTurn();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer("", false);
      player0.seeHand();
      player0.addActions(0);
      Card card0 = Card.COUNCILROOM;
      boolean boolean0 = player0.playCard(card0, player0);
      assertEquals(0, player0.getActions());
      assertTrue(boolean0);
  }
}
